// Code generated by protoc-gen-go.
// source: rr_seq.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	rr_seq.proto

It has these top-level messages:
	NextIDRequest
	NextIDReply
	CurIDRequest
	CurIDReply
	SetIDRequest
	SetIDReply
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type NextIDRequest struct {
	Name      string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	RangeSize int64  `protobuf:"varint,2,opt,name=range_size,json=rangeSize" json:"range_size,omitempty"`
}

func (m *NextIDRequest) Reset()                    { *m = NextIDRequest{} }
func (m *NextIDRequest) String() string            { return proto.CompactTextString(m) }
func (*NextIDRequest) ProtoMessage()               {}
func (*NextIDRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type NextIDReply struct {
	FromId uint64 `protobuf:"varint,1,opt,name=from_id,json=fromId" json:"from_id,omitempty"`
	ToId   uint64 `protobuf:"varint,2,opt,name=to_id,json=toId" json:"to_id,omitempty"`
}

func (m *NextIDReply) Reset()                    { *m = NextIDReply{} }
func (m *NextIDReply) String() string            { return proto.CompactTextString(m) }
func (*NextIDReply) ProtoMessage()               {}
func (*NextIDReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type CurIDRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *CurIDRequest) Reset()                    { *m = CurIDRequest{} }
func (m *CurIDRequest) String() string            { return proto.CompactTextString(m) }
func (*CurIDRequest) ProtoMessage()               {}
func (*CurIDRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type CurIDReply struct {
	CurId uint64 `protobuf:"varint,1,opt,name=cur_id,json=curId" json:"cur_id,omitempty"`
}

func (m *CurIDReply) Reset()                    { *m = CurIDReply{} }
func (m *CurIDReply) String() string            { return proto.CompactTextString(m) }
func (*CurIDReply) ProtoMessage()               {}
func (*CurIDReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type SetIDRequest struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	NewId uint64 `protobuf:"varint,2,opt,name=new_id,json=newId" json:"new_id,omitempty"`
}

func (m *SetIDRequest) Reset()                    { *m = SetIDRequest{} }
func (m *SetIDRequest) String() string            { return proto.CompactTextString(m) }
func (*SetIDRequest) ProtoMessage()               {}
func (*SetIDRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type SetIDReply struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *SetIDReply) Reset()                    { *m = SetIDReply{} }
func (m *SetIDReply) String() string            { return proto.CompactTextString(m) }
func (*SetIDReply) ProtoMessage()               {}
func (*SetIDReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func init() {
	proto.RegisterType((*NextIDRequest)(nil), "pb.NextIDRequest")
	proto.RegisterType((*NextIDReply)(nil), "pb.NextIDReply")
	proto.RegisterType((*CurIDRequest)(nil), "pb.CurIDRequest")
	proto.RegisterType((*CurIDReply)(nil), "pb.CurIDReply")
	proto.RegisterType((*SetIDRequest)(nil), "pb.SetIDRequest")
	proto.RegisterType((*SetIDReply)(nil), "pb.SetIDReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for RRAPI service

type RRAPIClient interface {
	GRPCNextID(ctx context.Context, in *NextIDRequest, opts ...grpc.CallOption) (*NextIDReply, error)
	GRPCCurID(ctx context.Context, in *CurIDRequest, opts ...grpc.CallOption) (*CurIDReply, error)
	GRPCSetID(ctx context.Context, in *SetIDRequest, opts ...grpc.CallOption) (*SetIDReply, error)
}

type rRAPIClient struct {
	cc *grpc.ClientConn
}

func NewRRAPIClient(cc *grpc.ClientConn) RRAPIClient {
	return &rRAPIClient{cc}
}

func (c *rRAPIClient) GRPCNextID(ctx context.Context, in *NextIDRequest, opts ...grpc.CallOption) (*NextIDReply, error) {
	out := new(NextIDReply)
	err := grpc.Invoke(ctx, "/pb.RRAPI/GRPCNextID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rRAPIClient) GRPCCurID(ctx context.Context, in *CurIDRequest, opts ...grpc.CallOption) (*CurIDReply, error) {
	out := new(CurIDReply)
	err := grpc.Invoke(ctx, "/pb.RRAPI/GRPCCurID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rRAPIClient) GRPCSetID(ctx context.Context, in *SetIDRequest, opts ...grpc.CallOption) (*SetIDReply, error) {
	out := new(SetIDReply)
	err := grpc.Invoke(ctx, "/pb.RRAPI/GRPCSetID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RRAPI service

type RRAPIServer interface {
	GRPCNextID(context.Context, *NextIDRequest) (*NextIDReply, error)
	GRPCCurID(context.Context, *CurIDRequest) (*CurIDReply, error)
	GRPCSetID(context.Context, *SetIDRequest) (*SetIDReply, error)
}

func RegisterRRAPIServer(s *grpc.Server, srv RRAPIServer) {
	s.RegisterService(&_RRAPI_serviceDesc, srv)
}

func _RRAPI_GRPCNextID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NextIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RRAPIServer).GRPCNextID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RRAPI/GRPCNextID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RRAPIServer).GRPCNextID(ctx, req.(*NextIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RRAPI_GRPCCurID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RRAPIServer).GRPCCurID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RRAPI/GRPCCurID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RRAPIServer).GRPCCurID(ctx, req.(*CurIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RRAPI_GRPCSetID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RRAPIServer).GRPCSetID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RRAPI/GRPCSetID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RRAPIServer).GRPCSetID(ctx, req.(*SetIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RRAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.RRAPI",
	HandlerType: (*RRAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GRPCNextID",
			Handler:    _RRAPI_GRPCNextID_Handler,
		},
		{
			MethodName: "GRPCCurID",
			Handler:    _RRAPI_GRPCCurID_Handler,
		},
		{
			MethodName: "GRPCSetID",
			Handler:    _RRAPI_GRPCSetID_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 288 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x91, 0xdd, 0x4a, 0xc3, 0x30,
	0x1c, 0xc5, 0xd7, 0xda, 0x76, 0xf6, 0x58, 0xbf, 0x22, 0x62, 0x19, 0x08, 0x12, 0x41, 0xbc, 0xaa,
	0x30, 0xaf, 0xc4, 0x2b, 0x9d, 0x20, 0xbd, 0x91, 0x91, 0x3d, 0x40, 0x59, 0xdb, 0x28, 0x03, 0xd7,
	0x76, 0x49, 0x8b, 0x1f, 0xef, 0xe2, 0xbb, 0x9a, 0xa4, 0x1b, 0xed, 0x6e, 0xf4, 0xae, 0xe7, 0xfc,
	0xfb, 0x3b, 0xf9, 0x9f, 0x04, 0x81, 0x10, 0x89, 0xe4, 0xab, 0xa8, 0x12, 0x65, 0x5d, 0x12, 0xbb,
	0x4a, 0xe9, 0x23, 0xf6, 0x5f, 0xf8, 0x67, 0x1d, 0x3f, 0x31, 0xbe, 0x6a, 0xb8, 0xac, 0x09, 0x81,
	0x53, 0xcc, 0x97, 0x3c, 0xb4, 0x2e, 0xac, 0x6b, 0x9f, 0x99, 0x6f, 0x72, 0x0e, 0x88, 0x79, 0xf1,
	0xc6, 0x13, 0xb9, 0xf8, 0xe6, 0xa1, 0xad, 0x26, 0x3b, 0xcc, 0x37, 0xce, 0x4c, 0x19, 0xf4, 0x1e,
	0x7b, 0x9b, 0x8c, 0xea, 0xfd, 0x8b, 0x9c, 0x61, 0xf8, 0x2a, 0xca, 0x65, 0xb2, 0xc8, 0x4d, 0x88,
	0xc3, 0x3c, 0x2d, 0xe3, 0x9c, 0x9c, 0xc0, 0xad, 0x4b, 0x6d, 0xdb, 0xc6, 0x76, 0xea, 0x32, 0xce,
	0x29, 0x45, 0x30, 0x69, 0xc4, 0x9f, 0xe7, 0xd3, 0x4b, 0x60, 0xfd, 0x8f, 0xce, 0x3f, 0x85, 0x97,
	0x35, 0xa2, 0x8b, 0x77, 0x95, 0x52, 0x41, 0x77, 0x08, 0x66, 0xfc, 0x9f, 0x22, 0x0a, 0x2d, 0xf8,
	0x47, 0xb7, 0x82, 0xab, 0x94, 0x42, 0xaf, 0x80, 0x35, 0xaa, 0xf3, 0x43, 0x0c, 0x65, 0x93, 0x65,
	0x5c, 0x4a, 0xc3, 0xee, 0xb2, 0x8d, 0x1c, 0xff, 0x58, 0x70, 0x19, 0x7b, 0x98, 0xc6, 0x64, 0x0c,
	0x3c, 0xb3, 0xe9, 0xa4, 0xad, 0x4d, 0x8e, 0xa3, 0x2a, 0x8d, 0xb6, 0xae, 0x71, 0x74, 0xd8, 0xb7,
	0x54, 0x2a, 0x1d, 0x90, 0x1b, 0xf8, 0x9a, 0x31, 0x4d, 0xc8, 0x91, 0x9e, 0xf7, 0x8b, 0x8f, 0x0e,
	0x7a, 0xce, 0x16, 0x60, 0x56, 0x6b, 0x81, 0x7e, 0xc1, 0x16, 0xe8, 0xf6, 0xa6, 0x83, 0xd4, 0x33,
	0xef, 0x7a, 0xfb, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x66, 0xfc, 0x56, 0x73, 0xe7, 0x01, 0x00, 0x00,
}
